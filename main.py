import cv2
import numpy as np
import os
import asyncio
import random
import requests
from telethon import events, Button
import tempfile
import math
import subprocess
import json
from PIL import Image, ImageDraw, ImageFont, ImageFilter
from telethon import TelegramClient
from telethon.errors import FloodWaitError, ChatAdminRequiredError
from collections import deque
from pyfiglet import Figlet

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "tg_config.json"

class ConfigManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞."""
    @staticmethod
    def save(phone, api_id, api_hash, disable_animations=False):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
        config = {
            "phone": phone,
            "api_id": api_id,
            "api_hash": api_hash,
            "disable_animations": disable_animations
        }
        with open(CONFIG_FILE, "w") as f:
            json.dump(config, f)

    @staticmethod
    def load():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(CONFIG_FILE, "r") as f:
                config = json.load(f)
                return (
                    config.get("phone"),
                    config.get("api_id"),
                    config.get("api_hash"),
                    config.get("disable_animations", False)
                )
        except (FileNotFoundError, json.JSONDecodeError):
            return None, None, None, False

async def setup_client():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Telegram."""
    phone, api_id, api_hash, disable_animations = ConfigManager.load()
    if not all([phone, api_id, api_hash]):
        phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
        api_id = input("üîë –í–≤–µ–¥–∏—Ç–µ API ID: ").strip()
        if not api_id.isdigit():
            raise ValueError("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        api_id = int(api_id)
        api_hash = input("üíé –í–≤–µ–¥–∏—Ç–µ API HASH: ").strip()
        ConfigManager.save(phone, api_id, api_hash, disable_animations=False)
    return TelegramClient('tg_session', api_id, api_hash), phone, disable_animations

client, phone, DISABLE_ANIMATIONS = asyncio.run(setup_client())
SELF_ID = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã "–ë–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä"
VIEW_WIDTH = 30
WORLD_WIDTH = 1000
JUMP_HEIGHT = 4
GRAVITY = 0.5
OBSTACLES = ['üåµ', 'ü¶ñ', 'üí®']
GROUND = '‚ïê'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ "Cubbies Ripples"
CUBE_CHARS = ["‚ñÄ", "‚ñÑ", "‚ñ†", "‚ñå", "‚ñê", "‚ññ", "‚ñó", "‚ñò", "‚ñô", "‚ñö", "‚ñõ", "‚ñú", "‚ñù", "‚ñû", "‚ñü"]
RIPPLE_WIDTH = 20
RIPPLE_HEIGHT = 10
RIPPLE_SPEED = 0.2

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä –∏ –∞–Ω–∏–º–∞—Ü–∏–π
active_games = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ .heart
heart_emoji = [
    "‚ú®-üíé",
    "‚ú®-üå∫",
    "‚òÅÔ∏è-üòò",
    "‚ú®-üå∏",
    "üåæ-üê∏",
    "üî´-üí•",
    "‚òÅÔ∏è-üíü",
    "üçÄ-üíñ",
    "üå¥-üêº",
]
edit_heart = """
1 2 2 1 2 2 1
2 2 2 2 2 2 2
2 2 2 2 2 2 2
1 2 2 2 2 2 1
1 1 2 2 2 1 1
 1 1 1 2 1 1
"""

# –®–∞–±–ª–æ–Ω—ã –∏ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
SPIRAL_TEMPLATE = """
4 4 4 4 4 4 4 4 4 4 4 4
4 3 3 3 3 3 3 3 3 3 3 4
4 3 2 2 2 2 2 2 2 2 3 4
4 3 2 1 1 1 1 1 1 2 3 4
4 3 2 1 0 0 0 0 1 2 3 4
4 3 2 1 0 0 0 0 1 2 3 4
4 3 2 1 0 0 0 0 1 2 3 4
4 3 2 1 1 1 1 1 1 2 3 4
4 3 2 2 2 2 2 2 2 2 3 4
4 3 3 3 3 3 3 3 3 3 3 4
4 4 4 4 4 4 4 4 4 4 4 4
"""
SPIRAL_LEVELS = {
    0: "‚Ä¢",  # –¶–µ–Ω—Ç—Ä
    1: "‚ñë",  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–π
    2: "‚ñí",  # –°—Ä–µ–¥–Ω–∏–π —Å–ª–æ–π
    3: "‚ñì",  # –í–Ω–µ—à–Ω–∏–π —Å–ª–æ–π
    4: " "   # –§–æ–Ω
}

WAVE_TEMPLATE = """
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9
"""
WAVE_LEVELS = {
    0: "‚âà", 1: "~", 2: "‚Åì", 3: "‚àø",
    4: "¬∑", 5: " ", 6: "¬∑", 7: "‚àø",
    8: "‚Åì", 9: "~"
}

# –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã "–ë–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä"
class DinoGame:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π '–ë–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä'."""
    def __init__(self, chat_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã.
        :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞.
        """
        self.chat_id = chat_id
        self.is_running = True
        self.dino_pos = 0  # –ü–æ–∑–∏—Ü–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        self.dino_vel = 0  # –°–∫–æ—Ä–æ—Å—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞
        self.obstacles = deque()  # –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        self.score = 0  # –°—á–µ—Ç –∏–≥—Ä—ã
        self.message = None  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º

    async def game_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            self.message = await client.send_message(
                self.chat_id,
                self._render_frame(),
                buttons=[
                    [Button.inline("ü¶ò –ü—Ä—ã–∂–æ–∫", b"jump")],
                    [Button.inline("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", b"stop")]
                ]
            )
            while self.is_running:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                self._update_game_state()
                # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–¥—Ä
                await self.message.edit(self._render_frame())
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–¥—Ä–æ–º
                await asyncio.sleep(0.5)
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            await self.game_over()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")

    def _update_game_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã."""
        # –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        self.dino_pos += self.dino_vel
        self.dino_vel += GRAVITY
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–µ–º–ª—é
        if self.dino_pos < 0:
            self.dino_pos = 0
            self.dino_vel = 0
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        if random.random() < 0.2:  # 20% —à–∞–Ω—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            self.obstacles.append(random.choice(OBSTACLES))
        # –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        if len(self.obstacles) > 0:
            self.obstacles.popleft()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        if len(self.obstacles) > 0 and self.obstacles[0] != ' ' and self.dino_pos == 0:
            self.is_running = False  # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        self.score += 1

    def _render_frame(self):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∏–≥—Ä—ã."""
        frame = []
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–Ω–µ–±–æ)
        for _ in range(JUMP_HEIGHT):
            frame.append(" " * VIEW_WIDTH)
        # –õ–∏–Ω–∏—è —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
        dino_line = list(" " * VIEW_WIDTH)
        if self.dino_pos == 0:
            dino_line[0] = "ü¶ñ"  # –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–∞ –∑–µ–º–ª–µ
        else:
            dino_line[0] = "ü¶ò"  # –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ø—Ä—ã–∂–∫–µ
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        for i, obstacle in enumerate(self.obstacles):
            if i < VIEW_WIDTH:
                dino_line[i] = obstacle
        frame.append("".join(dino_line))
        # –ó–µ–º–ª—è
        frame.append(GROUND * VIEW_WIDTH)
        # –°—á–µ—Ç
        frame.append(f"–°—á–µ—Ç: {self.score}")
        return "\n".join(frame)

    async def jump(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—ã–∂–æ–∫ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞."""
        if self.dino_pos == 0:  # –î–∏–Ω–æ–∑–∞–≤—Ä –º–æ–∂–µ—Ç –ø—Ä—ã–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∑–µ–º–ª–∏
            self.dino_vel = -JUMP_HEIGHT

    async def game_over(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É."""
        await self.message.edit(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: {self.score}")
        del active_games[self.chat_id]  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@client.on(events.NewMessage(pattern=r"\.t\s.+"))
async def typewriter_handler(event):
    """–≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞—é—â–µ–π –º–∞—à–∏–Ω–∫–∏."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.text.split(".t ", 1)[1]
        msg = await event.respond("_")  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        buffer = ""
        for char in text:
            buffer += char
            try:
                await msg.edit(buffer + "_")
            except FloodWaitError as e:
                print(f"FloodWait: –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫...")
                await asyncio.sleep(e.seconds)
                await msg.edit(buffer + "_")
            await asyncio.sleep(0.3)
        await msg.edit(buffer)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ .t: {e}")

@client.on(events.NewMessage(pattern=r"\.ascii\s.+"))
async def ascii_handler(event):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ ASCII-–∞—Ä—Ç."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.text.split(maxsplit=1)[1]
        figlet = Figlet(font='slant')
        ascii_art = figlet.renderText(text)
        await event.respond(f"```\n{ascii_art}\n```")  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        print(f"ASCII error: {e}")

@client.on(events.NewMessage(pattern=r"\.cosmic\s.+"))
async def cosmic_handler(event):
    """–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.text.split(maxsplit=1)[1]
        msg = await event.respond("üåÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cosmic_explosion_effect(msg, text)
    except Exception as e:
        print(f"Error: {e}")

@client.on(events.NewMessage(pattern=r"\.cubbies"))
async def cubbies_handler(event):
    """–ê–Ω–∏–º–∞—Ü–∏—è 'Cubbies Ripples'."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        animation = RippleAnimation(event.chat_id)
        asyncio.create_task(animation.run())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@client.on(events.NewMessage(pattern='/rundino'))
async def start_game(event):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã '–ë–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä'."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        chat_id = event.chat_id
        if chat_id in active_games:
            warn_msg = await event.respond("‚ùó –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            await asyncio.sleep(3)
            await warn_msg.delete()
            return
        game = DinoGame(chat_id)
        active_games[chat_id] = game
        asyncio.create_task(game.game_loop())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /rundino: {e}")

@client.on(events.CallbackQuery)
async def handle_callback(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    game = active_games.get(event.chat_id)
    if not game:
        return
    if event.data == b'jump':
        await game.jump()
    elif event.data == b'stop':
        game.is_running = False
        await game.game_over()

@client.on(events.NewMessage(pattern=r"\.heart+"))
async def heart_handler(event):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        chat = event.chat_id
        frame_index = 0
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        message = await client.send_message(chat, edit_heart)
        while frame_index < len(heart_emoji):
            animated_text = edit_heart.replace("1", heart_emoji[frame_index].split("-")[0]).replace("2", heart_emoji[frame_index].split("-")[1])
            await client.edit_message(chat, message.id, animated_text)
            await asyncio.sleep(1)
            frame_index += 1
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .heart: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.wave+"))
async def wave_handler(event):
    """–í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.message.message.split(".wave ", maxsplit=1)[1]
        chat = event.chat_id
        message = await client.send_message(chat, text)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            for i in range(len(text)):
                wave_text = ""
                for j, char in enumerate(text):
                    wave_text += char.upper() if j == i else char.lower()
                await client.edit_message(chat, message.id, wave_text)
                await asyncio.sleep(0.1)  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ–ª–Ω—ã
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .wave: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.merc+"))
async def merc_handler(event):
    """–ú–µ—Ä—Ü–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.message.message.split(".merc ", maxsplit=1)[1]
        chat = event.chat_id
        message = await client.send_message(chat, text)
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
            await client.edit_message(chat, message.id, text)
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
            await client.edit_message(chat, message.id, " ")  # –ü—Ä–æ–±–µ–ª –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .merc: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.spiral"))
async def spiral_handler(event):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–∞—é—â–µ–π—Å—è —Å–ø–∏—Ä–∞–ª–∏."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()
        chat = event.chat_id
        message = await client.send_message(chat, "üåÄ –ó–∞–ø—É—Å–∫ —Å–ø–∏—Ä–∞–ª–∏...")
        # –ü–∞—Ä—Å–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
        template = [row.strip().split() for row in SPIRAL_TEMPLATE.strip().split('\n')]
        rows = len(template)
        cols = len(template[0])
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        frames = 36  # –ü–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç
        delay = 0.1
        for frame in range(frames):
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–∞
            rotated = []
            shift = frame % cols
            for row in template:
                # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥
                new_row = row[-shift:] + row[:-shift]
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–∏–º–≤–æ–ª—ã
                rotated_row = [SPIRAL_LEVELS[int(n)] for n in new_row]
                rotated.append(" ".join(rotated_row))
            await message.edit(f"```\n{chr(10).join(rotated)}\n```")
            await asyncio.sleep(delay)
        await message.edit("‚ú® –°–ø–∏—Ä–∞–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"Spiral error: {e}")

@client.on(events.NewMessage(pattern=r"\.wave_anim"))
async def wave_anim_handler(event):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω—ã."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()
        chat = event.chat_id
        message = await client.send_message(chat, "üåä –ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω—ã...")
        # –ü–∞—Ä—Å–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
        template = [list(map(int, row.strip().split())) for row in WAVE_TEMPLATE.strip().split('\n')]
        rows = len(template)
        cols = len(template[0])
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        frames = 20
        delay = 0.15
        for frame in range(frames):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞
            animated = []
            phase = frame % len(WAVE_LEVELS)
            for row in template:
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–∑–æ–≤–æ–≥–æ —Å–¥–≤–∏–≥–∞
                new_row = [str((n + phase) % len(WAVE_LEVELS)) for n in row]
                # –î–≤–æ–π–Ω–æ–π –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
                shifted_row = new_row[frame%cols:] + new_row[:frame%cols]
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–∏–º–≤–æ–ª—ã
                wave_row = [WAVE_LEVELS[int(n)] for n in shifted_row]
                animated.append(" ".join(wave_row))
            await message.edit(f"```\n{chr(10).join(animated)}\n```")
            await asyncio.sleep(delay)
        await message.edit("‚ú® –í–æ–ª–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"Wave error: {e}")

@client.on(events.NewMessage(pattern=r"\.fractal"))
async def fractal_handler(event):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ñ—Ä–∞–∫—Ç–∞–ª–∞ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –°–µ—Ä–ø–∏–Ω—Å–∫–æ–≥–æ)."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        chat = event.chat_id
        message = await client.send_message(chat, "üåÄ –ó–∞–ø—É—Å–∫ —Ñ—Ä–∞–∫—Ç–∞–ª–∞...")
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—Ä–∞–∫—Ç–∞–ª–∞
        size = 16
        frames = 20
        delay = 0.2
        def generate_fractal(level):
            if level == 0:
                return ["#"]
            else:
                smaller = generate_fractal(level - 1)
                return [row + " " * (2 ** (level - 1)) + row for row in smaller] + \
                       [row + row for row in smaller]
        for frame in range(frames):
            fractal = generate_fractal(min(frame, 4))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ñ—Ä–∞–∫—Ç–∞–ª–∞
            fractal_text = "\n".join(fractal)
            await client.edit_message(chat, message.id, f"```\n{fractal_text}\n```")
            await asyncio.sleep(delay)
        await client.edit_message(chat, message.id, "‚ú® –§—Ä–∞–∫—Ç–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω!")
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .fractal: {str(e)}")

@client.on(events.NewMessage(pattern=r"\.speak\s.+"))
async def text_to_speech_handler(event):
    """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        text = event.text.split(".speak ", 1)[1]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        with open("tts.txt", "w", encoding="utf-8") as f:
            f.write(text)
        # –í—ã–∑—ã–≤–∞–µ–º Termux API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        subprocess.run(["termux-tts-speak", "-f", "tts.txt"])
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        msg = await event.respond("üîä –¢–µ–∫—Å—Ç –æ–∑–≤—É—á–µ–Ω!")
        await asyncio.sleep(3)
        await msg.delete()
    except Exception as e:
        error_msg = await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(5)
        await error_msg.delete()

@client.on(events.NewMessage(pattern=r"\.read"))
async def voice_message_handler(event):
    """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await event.delete()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not event.is_reply:
            msg = await event.respond("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π .read")
            await asyncio.sleep(3)
            await msg.delete()
            return
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_msg = await event.get_reply_message()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        if not reply_msg.text:
            msg = await event.respond("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏")
            await asyncio.sleep(3)
            await msg.delete()
            return
        text = reply_msg.text
        # –û–∑–≤—É—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Termux
        subprocess.run(["termux-tts-speak", text])
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
        msg = await event.respond("üîä –°–æ–æ–±—â–µ–Ω–∏–µ –æ–∑–≤—É—á–µ–Ω–æ!")
        await asyncio.sleep(3)
        await msg.delete()
    except Exception as e:
        error_msg = await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await asyncio.sleep(5)
        await error_msg.delete()

@client.on(events.NewMessage(pattern=r"\.foto_ascii(?:\s+(\d+))? ?"))
async def foto_ascii_handler(event):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π ASCII-–∞—Ä—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∏ —è—Ä–∫–æ—Å—Ç—å."""
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        if not event.is_reply:
            response = await event.reply("‚ùó **–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!**")
            await asyncio.sleep(2)
            await response.delete()
            return
        reply_msg = await event.get_reply_message()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if not reply_msg.photo and not (reply_msg.document and reply_msg.document.mime_type.startswith('image/')):
            response = await event.reply("‚ùå **–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!**")
            await asyncio.sleep(2)
            await response.delete()
            return
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        width = int(event.pattern_match.group(1)) if event.pattern_match.group(1) else 200
        width = min(width, 300)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        msg_progress = await event.reply("üîç **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π...**")
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_input_path = os.path.join(temp_dir, "input.jpg")
            await reply_msg.download_media(temp_input_path)
            try:
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                ascii_data = await _enhanced_image_processing(temp_input_path, width)
                output_path = await _render_high_contrast(ascii_data)
                await msg_progress.delete()
                await event.reply(
                    file=output_path,
                    message="üéÜ **–Ø—Ä–∫–∏–π ASCII-–∞—Ä—Ç** (HD)"
                )
            except Exception as e:
                await msg_progress.edit(f"‚ùå **–û—à–∏–±–∫–∞:** `{str(e)}`")
                await asyncio.sleep(5)
    except Exception as e:
        await event.reply(f"üí• **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:** `{str(e)}`")

async def _enhanced_image_processing(image_path, width):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–Ω–µ–π."""
    with Image.open(image_path) as img:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏
        img = img.convert("RGB")
        width = min(width, img.width)
        aspect = img.height / img.width
        height = int(width * aspect * 0.6)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        img = img.resize((width, height), Image.LANCZOS)  # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        pixels = img.getdata()
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–Ω–µ–π
        ASCII_CHARS = "@%#*+=-:. "  # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–Ω–µ–π
        data = {"text": [], "colors": [], "width": width, "height": height}  # –î–æ–±–∞–≤–ª–µ–Ω—ã width –∏ height
        for y in range(height):
            row = []
            colors = []
            for x in range(width):
                r, g, b = pixels[y * width + x]
                # –£—Å–∏–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                r = min(r * 1.2, 255)
                g = min(g * 1.2, 255)
                b = min(b * 1.2, 255)
                # –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ —è—Ä–∫–æ—Å—Ç–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–µ–Ω–∏
                brightness = (0.299 * r + 0.587 * g + 0.114 * b) / 255
                idx = int(brightness * (len(ASCII_CHARS) - 1))
                row.append(ASCII_CHARS[idx])
                colors.append((int(r), int(g), int(b)))
            data["text"].append("".join(row))
            data["colors"].append(colors)
        return data

async def _render_high_contrast(ascii_data, font_size=12):
    """–†–µ–Ω–¥–µ—Ä —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("DejaVuSansMono-Bold.ttf", font_size)
        except IOError:
            # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            font = ImageFont.load_default()
        bbox = font.getbbox("‚ñà")
        char_width, char_height = bbox[2] - bbox[0], bbox[3] - bbox[1]
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä—ã–º —Ñ–æ–Ω–æ–º –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        img = Image.new(
            "RGB",
            (ascii_data["width"] * char_width, ascii_data["height"] * char_height),
            (40, 40, 40)  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        )
        draw = ImageDraw.Draw(img)
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
        for y, (line, colors) in enumerate(zip(ascii_data["text"], ascii_data["colors"])):
            for x, (char, color) in enumerate(zip(line, colors)):
                draw.text(
                    (x * char_width, y * char_height),
                    char,
                    font=font,
                    fill=color
                )
        # –†–µ–∑–∫–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä
        img = img.filter(ImageFilter.SHARPEN)
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as f:
            img.save(f, "PNG", quality=95, optimize=True)
            return f.name
    except Exception as e:
        raise Exception(f"Render error: {str(e)}")

TMDB_API_KEY = "YOUR_TMDB_API_KEY"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–æ–≤ (–∫–ª—é—á ‚Äî chat_id)
active_film_players = {}

# –†–µ–∂–∏–º—ã –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–µ–µ—Ä–∞:
# "Awaiting URL" ‚Äì –ø–ª–µ–µ—Ä –∂–¥—ë—Ç –ø—Ä—è–º–æ–π URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# "Awaiting Search Query" ‚Äì –ø–ª–µ–µ—Ä –∂–¥—ë—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ TMDb

class FilmPlayer:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å TMDb –∏ lampa.web."""
    def __init__(self, chat_id, message):
        self.chat_id = chat_id
        self.message = message
        self.url = None
        self.title = None
        self.state = "Stopped"  # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: Stopped, Playing, Paused, Awaiting URL, Awaiting Search Query
        self.current_time = 0  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.quality = "720p"   # –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        self.muted = False      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞
        self._playing_task = None

    def get_progress_bar(self, length=20):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫)."""
        total = 60
        filled = int((self.current_time / total) * length)
        bar = "‚ñà" * filled + "‚ñë" * (length - filled)
        return bar

    def get_buttons(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–ª–µ–µ—Ä–∞ —Å —á–µ—Ç—ã—Ä—å–º—è —Ä—è–¥–∞–º–∏ –∫–Ω–æ–ø–æ–∫."""
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ ‚Äì –±–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–æ—Ç–∫–∞:
        row1 = [
            Button.inline("‚óÄÔ∏è 10s", b"film_rewind"),
            Button.inline("‚ñ∂Ô∏è Play", b"film_play"),
            Button.inline("‚è∏ Pause", b"film_pause"),
            Button.inline("10s ‚ñ∂Ô∏è", b"film_forward"),
            Button.inline("‚èπ Stop", b"film_stop")
        ]
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ ‚Äì –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞:
        row2 = [
            Button.inline("üîó –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É", b"film_enter_url"),
            Button.inline("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", b"film_search")
        ]
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ ‚Äì –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞:
        row3 = [
            Button.inline("480p", b"film_quality_480"),
            Button.inline("720p", b"film_quality_720"),
            Button.inline("1080p", b"film_quality_1080")
        ]
        # –ß–µ—Ç–≤—ë—Ä—Ç—ã–π —Ä—è–¥ ‚Äì –æ–ø—Ü–∏—è –∑–≤—É–∫–∞:
        row4 = [
            Button.inline("üîä" if not self.muted else "üîá", b"film_toggle_sound")
        ]
        return [row1, row2, row3, row4]

    async def update_message(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
        text = "üé¨ **–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä**\n\n"
        text += f"–§–∏–ª—å–º: {self.title if self.title else '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
        text += f"URL: {self.url if self.url else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        text += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state}\n"
        text += f"–ö–∞—á–µ—Å—Ç–≤–æ: {self.quality}\n"
        text += f"–ó–≤—É–∫: {'–û—Ç–∫–ª—é—á–µ–Ω' if self.muted else '–í–∫–ª—é—á–µ–Ω'}\n"
        text += f"–í—Ä–µ–º—è: {self.current_time} —Å–µ–∫\n"
        text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {self.get_progress_bar()}\n\n"
        if self.state in ["Awaiting URL", "Awaiting Search Query"]:
            text += "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
        else:
            text += "–ù–∏–∂–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        buttons = self.get_buttons()
        await self.message.edit(text, buttons=buttons)

    async def play(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞."""
        if not self.url:
            await self.message.edit(
                "‚ùó –§–∏–ª—å–º –Ω–µ –≤—ã–±—Ä–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.",
                buttons=[
                    [Button.inline("üîó –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É", b"film_enter_url"),
                     Button.inline("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", b"film_search")]
                ]
            )
            return
        self.state = "Playing"
        await self.update_message()
        if self._playing_task and not self._playing_task.done():
            self._playing_task.cancel()
        self._playing_task = asyncio.create_task(self.simulate_play())

    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ."""
        if self.state == "Playing":
            self.state = "Paused"
            await self.update_message()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è."""
        self.state = "Stopped"
        self.current_time = 0
        await self.update_message()

    async def forward(self, seconds=10):
        """–ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ—Ç –≤–ø–µ—Ä—ë–¥."""
        self.current_time += seconds
        if self.current_time > 60:
            self.current_time = 60
        await self.update_message()

    async def rewind(self, seconds=10):
        """–ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–∞–¥."""
        self.current_time -= seconds
        if self.current_time < 0:
            self.current_time = 0
        await self.update_message()

    async def toggle_sound(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞."""
        self.muted = not self.muted
        await self.update_message()

    async def simulate_play(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–æ 60 —Å–µ–∫."""
        try:
            while self.state == "Playing":
                await asyncio.sleep(1)
                self.current_time += 1
                if self.current_time >= 60:
                    self.state = "Stopped"
                    self.current_time = 60
                    await self.update_message()
                    break
                await self.update_message()
        except asyncio.CancelledError:
            pass

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ TMDb
def search_movie_tmdb(query):
    url = "https://api.themoviedb.org/3/search/movie"
    params = {"api_key": TMDB_API_KEY, "query": query, "language": "ru-RU"}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data.get("results", [])
    return []

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–ª–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ TMDb
def get_movie_trailer(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}/videos"
    params = {"api_key": TMDB_API_KEY, "language": "ru-RU"}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        for video in data.get("results", []):
            if video.get("site") == "YouTube" and video.get("type") == "Trailer":
                return f"https://youtu.be/{video.get('key')}"
    return None

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–µ—Ä–∞ –∏–∑ lampa.web API
def get_movie_details_lampa(movie_id):
    """
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API lampa.web –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
      https://lampa.example.com/api/movie/{movie_id}
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∫–ª—é—á–∞–º–∏ 'title' –∏ 'poster'.
    """
    url = f"https://lampa.example.com/api/movie/{movie_id}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data  # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ data —Å–æ–¥–µ—Ä–∂–∏—Ç 'title' –∏ 'poster'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ lampa.web: {e}")
    return None

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–µ–µ—Ä–∞
@client.on(events.NewMessage(pattern=r"\.film"))
async def film_handler(event):
    try:
        if DISABLE_ANIMATIONS and event.sender_id != SELF_ID:
            return
        await event.delete()
        chat = event.chat_id
        message = await client.send_message(chat, "üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞...")
        film_player = FilmPlayer(chat, message)
        active_film_players[chat] = film_player
        await film_player.update_message()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ .film: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äë–∫–Ω–æ–ø–æ–∫ –ø–ª–µ–µ—Ä–∞
@client.on(events.CallbackQuery)
async def film_callback_handler(event):
    chat = event.chat_id
    if chat not in active_film_players:
        return
    film_player = active_film_players[chat]
    data = event.data.decode('utf-8')
    if data == "film_play":
        await film_player.play()
    elif data == "film_pause":
        await film_player.pause()
    elif data == "film_stop":
        await film_player.stop()
    elif data == "film_forward":
        await film_player.forward(10)
    elif data == "film_rewind":
        await film_player.rewind(10)
    elif data == "film_toggle_sound":
        await film_player.toggle_sound()
        await event.answer("–ó–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω")
    elif data == "film_enter_url":
        film_player.state = "Awaiting URL"
        await film_player.update_message()
        await event.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –≤ —á–∞—Ç")
    elif data == "film_search":
        film_player.state = "Awaiting Search Query"
        await film_player.update_message()
        await event.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    elif data.startswith("film_select_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        movie_id = data.split("_")[-1]
        trailer_url = get_movie_trailer(movie_id)
        details = get_movie_details_lampa(movie_id)
        if details:
            poster_url = details.get("poster")
            title = details.get("title", f"–§–∏–ª—å–º {movie_id}")
        else:
            poster_url = None
            title = f"–§–∏–ª—å–º {movie_id}"
        film_player.url = trailer_url if trailer_url else "https://example.com/default.mp4"
        film_player.title = title
        film_player.state = "Stopped"
        film_player.current_time = 0
        await film_player.update_message()
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç
        if poster_url:
            try:
                await client.send_file(chat, poster_url, caption=f"–ü–æ—Å—Ç–µ—Ä: {title}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
        await event.answer("–§–∏–ª—å–º –≤—ã–±—Ä–∞–Ω!")
    else:
        await event.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
@client.on(events.NewMessage)
async def film_input_handler(event):
    chat = event.chat_id
    if chat in active_film_players:
        film_player = active_film_players[chat]
        # –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –ø—Ä—è–º–æ–π URL
        if film_player.state == "Awaiting URL" and not event.text.startswith('.'):
            url = event.text.strip()
            film_player.url = url
            film_player.title = url.split('/')[-1]
            film_player.state = "Stopped"
            film_player.current_time = 0
            await film_player.update_message()
            await event.delete()
        # –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        elif film_player.state == "Awaiting Search Query" and not event.text.startswith('.'):
            query = event.text.strip()
            results = search_movie_tmdb(query)
            if results:
                text = "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:**\n"
                buttons = []
                for movie in results[:5]:
                    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    release_date = movie.get("release_date", "")[:4]
                    button_text = f"{title} ({release_date})"
                    buttons.append(Button.inline(button_text, f"film_select_{movie.get('id')}"))
                    text += f"- {button_text}\n"
                await event.reply(text, buttons=[buttons])
            else:
                await event.reply("‚ùå –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
            film_player.state = "Stopped"
            await film_player.update_message()
            await event.delete()

@client.on(events.NewMessage(pattern=r"\.help"))
async def help_handler(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = """üöÄ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

`.ascii <—Ç–µ–∫—Å—Ç>` - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ ASCII-–∞—Ä—Ç
`.t <—Ç–µ–∫—Å—Ç>` - –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞—é—â–µ–π –º–∞—à–∏–Ω–∫–∏
`.cosmic <—Ç–µ–∫—Å—Ç>` - –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
`/rundino` - –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã "–ë–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä"
`.cubbies` - –ê–Ω–∏–º–∞—Ü–∏—è "Cubbies Ripples"
`.heart` - –ê–Ω–∏–º–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞
`.wave <—Ç–µ–∫—Å—Ç>` - –í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
`.merc <—Ç–µ–∫—Å—Ç>` - –ú–µ—Ä—Ü–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
`.spiral` - –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–∞—é—â–µ–π—Å—è —Å–ø–∏—Ä–∞–ª–∏
`.wave_anim` - –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–ª–Ω—ã
`.fractal` - –ê–Ω–∏–º–∞—Ü–∏—è —Ñ—Ä–∞–∫—Ç–∞–ª–∞ (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –°–µ—Ä–ø–∏–Ω—Å–∫–æ–≥–æ)
`.speak <—Ç–µ–∫—Å—Ç>` - –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç (Android + Termux)
`.read` (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (Android + Termux)
`.foto_ascii` - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ç–æ –≤ ASCII-–∞—Ä—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)
`.disable` - –û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
`.film <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
`.help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ú® **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
`.ascii Hello`
`.t –ü—Ä–∏–≤–µ—Ç!`
`.cosmic Telegram`
`/rundino`
`.cubbies`
`.heart`
`.wave –ü—Ä–∏–≤–µ—Ç`
`.merc –ú–µ—Ä—Ü–∞–Ω–∏–µ`
`.spiral`
`.wave_anim`
`.fractal`
`.speak –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!`
`.read` (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
`.foto_ascii` (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ)
`.disable`
`.film –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä`
"""
    await event.reply(help_text)

@client.on(events.NewMessage(pattern=r"\.disable"))
async def disable_handler(event):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if event.sender_id != SELF_ID:
        return
    global DISABLE_ANIMATIONS
    DISABLE_ANIMATIONS = not DISABLE_ANIMATIONS
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
    phone, api_id, api_hash, _ = ConfigManager.load()
    ConfigManager.save(phone, api_id, api_hash, DISABLE_ANIMATIONS)
    state = "–æ—Ç–∫–ª—é—á–µ–Ω—ã" if DISABLE_ANIMATIONS else "–≤–∫–ª—é—á–µ–Ω—ã"
    await event.reply(f"–ê–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {state}.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await client.start(phone)
    self_user = await client.get_me()
    global SELF_ID
    SELF_ID = self_user.id
    print("üå† –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
