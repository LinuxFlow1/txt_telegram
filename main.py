import os
import sys
import asyncio
from telethon.sync import TelegramClient
from telethon import events

# —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_file = "config.txt"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(phone_number, api_id, api_hash):
    with open(config_file, "w") as file:
        file.write(f"{phone_number}\\n{api_id}\\n{api_hash}\\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    if os.path.exists(config_file):
        with open(config_file, "r") as file:
            data = file.read().splitlines()
            if len(data) == 3:
                return data[0], data[1], data[2]
    return None, None, None

# –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
phone_number, api_id, api_hash = load_config()

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if not all([phone_number, api_id, api_hash]):
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567): ")
    phone_number = input().strip()
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_id: ")
    api_id = input().strip()
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_hash: ")
    api_hash = input().strip()

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    save_config(phone_number, api_id, api_hash)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
client = TelegramClient('session_name', api_id, api_hash)
client.connect()

if not client.is_user_authorized():
    client.send_code_request(phone_number)
    code = input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Telegram: ')
    client.sign_in(phone_number, code)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.t` –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
@client.on(events.NewMessage(pattern=".t+"))
async def handler(event):
    try:
        text = event.message.message.split(".t ", maxsplit=1)[1]
        orig_text = text
        chat = event.chat_id

        tbp = ""  # to be printed
        typing_symbol = "/"

        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        message = await client.send_message(chat, typing_symbol)

        while tbp != orig_text:
            typing_symbol = "_" if typing_symbol == "/" else "-"
            tbp = tbp + text[0]
            text = text[1:]
            await client.edit_message(chat, message.id, tbp + typing_symbol)
            await asyncio.sleep(0.1)
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .t: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.heart` –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥–µ—á–µ–∫
heart_emoji = [
    "‚ú®-üíé",
    "‚ú®-üå∫",
    "‚òÅÔ∏è-üòò",
    "‚ú®-üå∏",
    "üåæ-üê∏",
    "üî´-üí•",
    "‚òÅÔ∏è-üíü",
    "üçÄ-üíñ",
    "üå¥-üêº",
]

edit_heart = """
1 2 2 1 2 2 1
2 2 2 2 2 2 2
2 2 2 2 2 2 2
1 2 2 2 2 2 1
1 1 2 2 2 1 1
 1 1 1 2 1 1
"""

@client.on(events.NewMessage(pattern=".heart+"))
async def heart_handler(event):
    try:
        chat = event.chat_id
        frame_index = 0

        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        message = await client.send_message(chat, edit_heart)

        while frame_index != len(heart_emoji):
            animated_text = edit_heart.replace("1", heart_emoji[frame_index].split("-")[0]).replace("2", heart_emoji[frame_index].split("-")[1])
            await client.edit_message(chat, message.id, animated_text)
            await asyncio.sleep(1)
            frame_index += 1
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .heart: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.alpha` –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
@client.on(events.NewMessage(pattern=".alpha+"))
async def alpha_handler(event):
    try:
        text = event.message.message.split(".alpha ", maxsplit=1)[1] if ".alpha " in event.message.message else "–ê–õ–§–ê–í–ò–¢–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò"
        chat = event.chat_id
        tbp = ""

        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = await client.send_message(chat, tbp)

        for char in text:
            tbp += char
            await client.edit_message(chat, message.id, tbp)
            await asyncio.sleep(0.1)
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .alpha: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.cat` –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏ –∫–æ—Ç–æ–≤
cat_emoji = {
    "–∞": "",
    "–±": "üêà",
    "–≤": "üêæ",
    "–≥": "üê±",
    "–¥": "üêà",
    "–µ": "üêæ",
    "—ë": "üê±",
    "–∂": "üêà",
    "–∑": "üêæ",
    "–∏": "üê±",
    "–π": "üêà",
    "–∫": "üêæ",
    "–ª": "üê±",
    "–º": "üêà",
    "–Ω": "üêæ",
    "–æ": "üê±",
    "–ø": "üêà",
    "—Ä": "üêæ",
    "—Å": "üê±",
    "—Ç": "üêà",
    "—É": "üêæ",
    "—Ñ": "üê±",
    "—Ö": "üêà",
    "—Ü": "üêæ",
    "—á": "üê±",
    "—à": "üêà",
    "—â": "üêæ",
    "—ä": "üê±",
    "—ã": "üêà",
    "—å": "üêæ",
    "—ç": "üê±",
    "—é": "üêà",
    "—è": ""
}

@client.on(events.NewMessage(pattern=".cat+"))
async def cat_handler(event):
    try:
        text = event.message.message.split(".cat ", maxsplit=1)[1]
        chat = event.chat_id
        tbp = ""

        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = await client.send_message(chat, tbp)

        for char in text.lower():
            tbp += cat_emoji.get(char, char)
            await client.edit_message(chat, message.id, tbp)
            await asyncio.sleep(0.1)
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .cat: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.wave` –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@client.on(events.NewMessage(pattern=".wave+"))
async def wave_handler(event):
    try:
        text = event.message.message.split(".wave ", maxsplit=1)[1]
        chat = event.chat_id
        message = await client.send_message(chat, text)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            for i in range(len(text)):
                wave_text = ""
                for j, char in enumerate(text):
                    if j == i:
                        wave_text += char.upper()
                    else:
                        wave_text += char.lower()
                await client.edit_message(chat, message.id, wave_text)
                await asyncio.sleep(0.1)  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ–ª–Ω—ã
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .wave: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.merc` –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
@client.on(events.NewMessage(pattern=".merc+"))
async def merc_handler(event):
    try:
        text = event.message.message.split(".merc ", maxsplit=1)[1]
        chat = event.chat_id
        message = await client.send_message(chat, text)

        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
            await client.edit_message(chat, message.id, text)
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
            await client.edit_message(chat, message.id, " ")  # –ü—Ä–æ–±–µ–ª –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
            await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .merc: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `.fall` –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–∞–¥–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
@client.on(events.NewMessage(pattern=".fall+"))
async def fall_handler(event):
    try:
        text = event.message.message.split(".fall ", maxsplit=1)[1]
        chat = event.chat_id

        await event.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        message = await client.send_message(chat, "‚Äé")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏

        for i in range(1, len(text) + 1):
            fall_text = '\n'.join([text[:j + 1] for j in range(i)])
            await client.edit_message(chat, message.id, fall_text)
            await asyncio.sleep(0.5)
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É .fall: {str(e)}")


# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
client.run_until_disconnected()
